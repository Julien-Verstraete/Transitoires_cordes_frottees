# -*- coding: utf-8 -*-
"""
Created on Wed Mar  5 17:55:33 2025

@author: Lalie
"""

import matplotlib.pyplot as plt
import numpy as np
import scipy.io
import scipy.signal as sg

file = scipy.io.loadmat("C:/Users/Lalie/Documents/M1 2024-2025/S2/Projet de recherche/analyse_python/DVC_pointe_piano_pousse_musician1_BowB_Astring")
indata = file['indata']

dynamic = "piano" # "piano" ou "forte"
sensor = "piezo" # "piezo" ou "pickup"

#%%  définition des variables

fe = 51200
N = len(indata)
t = np.arange(0,N/fe,1/fe)

if sensor == "piezo":
    sig = indata[:,0]
elif sensor == "pickup":
    sig == indata[:,2]
    
if dynamic == "piano":
    win_len = 512
    pp_height_factor = 1/3
    prominence = (0.002,None)
    distance = 200
elif dynamic == "forte":
    win_len = 2048
    pp_prominences = {'A': 0.013, 'C': 0.013}
    pp_distances = {'A': 20, 'C': 20}
    pp_height_factor = 1/3

#%% Detection des pics du signal

sig_diff = np.zeros(N-1)
    
for i in range(N-1):
    sig_diff[i] = sig[i+1]-sig[i]
    
abs_sig_diff = np.abs(sig_diff)

pp_height = np.zeros_like(abs_sig_diff)
for i in range(len(abs_sig_diff)-win_len):
    pp_height[int(win_len/2)+i] = np.max(abs_sig_diff[i:win_len+i]) * pp_height_factor

# Adjust initial and final height of signal (if not, height=0)
pp_height[0:int(win_len/2)] = pp_height[int(win_len/2)]
pp_height[-int(win_len/2):] = pp_height[-int(win_len/2)-1]

peaks ,_ = sg.find_peaks(abs_sig_diff,height=pp_height, 
                         distance = distance, prominence = prominence)

# retirer les pics dûs au bruit de fond 

if dynamic == 'piano':
    delete_bruit = []
    for i in range (1,len(peaks)-1):
        if np.logical_and(peaks[i+1] - peaks[i] > 2*win_len, peaks[i] - peaks[i-1] > 2*win_len ):
            delete_bruit.append(i)
    peaks = np.delete(peaks, delete_bruit)

# fig,ax = plt.subplots(nrows=2,sharex=True)
# ax[0].plot(t[:511999],sig[:511999], label = "signal " + sensor)
# ax[0].legend()
# ax[1].plot(t[:511999],abs_sig_diff, label = "Dérivée première du signal " + sensor)
# ax[1].plot(t[peaks],abs_sig_diff[peaks],'x', label = "pics")
# ax[1].plot(t[:511999], pp_height[:511999], color = "green")
# ax[1].legend()
# fig.show()

#%% Detection des pics pour le piezo

if sensor == "piezo":
    piezo = sig
    
    piezoprime = np.zeros(N-1)
        
    for i in range(N-1):
        piezoprime[i] = piezo[i+1]-piezo[i]
        
    piezoprime = np.abs(piezoprime)

    pp_height = np.zeros_like(piezoprime)
    for i in range(len(piezoprime)-win_len):
        pp_height[int(win_len/2)+i] = np.max(piezoprime[i:win_len+i]) * pp_height_factor

    # Adjust initial and final height of signal (if not, height=0)
    pp_height[0:int(win_len/2)] = pp_height[int(win_len/2)]
    pp_height[-int(win_len/2):] = pp_height[-int(win_len/2)-1]

    peakspiezo ,_ = sg.find_peaks(piezoprime,height=pp_height, distance = distance, prominence = prominence)

    # retirer les pics dûs au bruit de fond 

    if dynamic == 'piano':
        delete_piezo = []
        for i in range (1,len(peakspiezo)-1):
            if np.logical_and(peakspiezo[i+1] - peakspiezo[i] > 2*win_len, peakspiezo[i] - peakspiezo[i-1] > 2*win_len ):
                delete_piezo.append(i)
        peakspiezo = np.delete(peakspiezo, delete_piezo)

    # fig,ax = plt.subplots(nrows=2,sharex=True)
    # ax[0].plot(t[:511999],piezo[:511999], label = "signal piezo")
    # ax[0].legend()
    # ax[1].plot(t[:511999],piezoprime, label = "Dérivée première du signal piezo")
    # ax[1].plot(t[peakspiezo],piezoprime[peakspiezo],'x', label = "pics")
    # ax[1].plot(t[:511999], pp_height[:511999], color = "green")
    # ax[1].legend()
    # fig.show()

#%% Detection des pics pour le pickup

if sensor == "pickup":
    pickup = sig
    
    pick_diff = np.zeros(N-1)
    for i in range(N-1):
        pick_diff[i] = pickup[i+1]-pickup[i]

    pick_diff = np.abs(pick_diff)

    peakspick ,_ = sg.find_peaks(pick_diff,height=pp_height, distance = distance, prominence = prominence)

    # retirer les pics dûs au bruit de fond 

    if dynamic == 'piano':
        delete_pick = []
        for i in range (1,len(peakspick)-1):
            if np.logical_and(peakspick[i+1] - peakspick[i] > 2*win_len, peakspick[i] - peakspick[i-1] > 2*win_len ):
                delete_pick.append(i)
        peakspick = np.delete(peakspick, delete_pick)

    # fig,ax = plt.subplots(nrows=2,sharex=True)
    # ax[0].plot(t[:511999],pickup[:511999], label = "signal pickup")
    # ax[0].legend()
    # ax[1].plot(t[:511999],pick_diff, label = "Dérivée première du signal pickup")
    # ax[1].plot(t[peakspick],pick_diff[peakspick],'x', label = "pics")
    # ax[1].plot(t[:511999], pp_height[:511999], color = "green")
    # ax[1].legend()
    # fig.show()

#%% Construction de la variable nb_peaks

#win_len = 2048

abs_sig1_diff = np.abs(np.diff(piezo))

spf_array = np.zeros_like(piezoprime)
std_peaks_array = np.zeros_like(abs_sig1_diff)

nb_peaks1 = np.zeros_like(abs_sig1_diff)
for i in range(len(abs_sig1_diff)-win_len):
    nb_peaks1[int(win_len/2)+i] = len(np.where(
        np.logical_and(peakspiezo >= i, peakspiezo <= (win_len+i)))[0])
    
# plt.figure()
# plt.plot(np.arange(len(nb_peaks))/fe,nb_peaks,label = "signal pickup")

abs_sig2_diff = np.abs(np.diff(pickup))

std_peaks_array = np.zeros_like(abs_sig2_diff)

nb_peaks2 = np.zeros_like(abs_sig2_diff)
for i in range(len(abs_sig2_diff) - win_len):
    nb_peaks2[int(win_len/2)+i] = len(np.where(np.logical_and(peakspick>=i,peakspick<=(win_len+i)))[0])
    
# fig,ax = plt.subplots(nrows=2,sharex=True)
# ax[0].plot(t,pickup, label = "signal pickup")
# ax[0].legend()
# ax[1].plot(np.arange(len(nb_peaks1))/fe,nb_peaks1,label = "signal piezo")
# ax[1].plot(np.arange(len(nb_peaks2))/fe,nb_peaks2,label = "signal pickup")
# ax[1].legend()
# fig.show()

# plt.plot(np.arange(len(nb_peaks2))/fe,nb_peaks2,label = "signal piezzo")
# plt.legend()
# plt.grid()
# plt.show()

#%% Detection du onset

spf_th_wide = 24
std_th = 0.6

def detect_onsets_from_peaks(abs_sig_diff, peaks, sr, lagtime_peak=0.1):
    lagtime_peak_samples = int(lagtime_peak*sr)
    onset_frames = np.array([])
    # Only a peak can be an onset
    for i in range(len(peaks)):
        # If the peaks are in the first lagtime_peak seconds, we can not know
        # if it is an onset
        if peaks[i] < lagtime_peak_samples:
            continue
        # Number of peaks detected lagtime_peak seconds before current peak
        arethey_peaks_before = len(np.where(
            np.logical_and(peaks >= peaks[i] - lagtime_peak_samples,
                           peaks < peaks[i]))[0])
        # If there are no peaks lagtime_peak seconds before current peak
        # --> ONSET DETECTED
        if arethey_peaks_before == 0:
            onset_frames = np.append(onset_frames, peaks[i])
    return onset_frames/sr

file_onsets1 = detect_onsets_from_peaks(abs_sig1_diff, peakspiezo, fe,
                                       lagtime_peak=0.1)
file_onsets2 = detect_onsets_from_peaks(abs_sig2_diff, peakspick, fe,
                                       lagtime_peak=0.1)

fig,ax = plt.subplots(nrows=4,sharex=True)

# ax[0].plot(np.arange(len(piezo))*1/fe, piezo, label = "piezo")
# ax[0].vlines(file_onsets1,-5,5, color = 'r', linestyle = '--', label = "Detected onsets")
# ax[1].plot(np.arange(len(abs_sig1_diff))*1/fe, abs_sig1_diff, color = 'orange', label = "abs diff piezo")
# ax[1].plot(t[peakspick],pick_diff[peakspick],'x', label = "pics")
# ax[1].vlines(file_onsets1,-5,5, color = 'r', linestyle = '--', label = "Detected onsets")
# ax[1].plot(t[:511999], pp_height[:511999], color = "green")
# ax[1].set_ylim(-0.3,0.3)
# ax[2].plot(np.arange(len(pickup))*1/fe, pickup, label = "pickup")
# ax[2].vlines(file_onsets2,-5,5, color = 'r', linestyle = '--', label = "Detected onsets")
# ax[3].plot(np.arange(len(abs_sig2_diff))*1/fe, abs_sig2_diff, color = 'orange', label = "abs diff pickup")
# ax[3].plot(t[peakspick],pick_diff[peakspick],'x', label = "pics")
# ax[3].vlines(file_onsets2,-5,5, color = 'r', linestyle = '--', label = "Detected onsets")

# fig.show()
