# -*- coding: utf-8 -*-
"""
Created on Sat Mar  1 12:41:55 2025

@author: Lalie
"""

import os
import matplotlib.pyplot as plt
from tqdm import tqdm
import numpy as np
import scipy.io
import glob
import scipy.signal as sg

file = scipy.io.loadmat("C:/Users/Lalie/Documents/M1 2024-2025/S2/Projet de recherche/analyse_python/DVC_pointe_piano_pousse_musician1_BowB_Astring.mat")
indata = file['indata']

# fe = 51200
# pickup = indata
# N = len(indata)
# t = np.arange(0,N/fe,1/fe)

#%%  

fe = 51200
piezo = indata[:,0]
pickup = indata[:,2]
N = len(indata)
t = np.arange(0,N/fe,1/fe)

piezoprime = np.zeros(N-1)
    
for i in range(N-1):
    piezoprime[i] = piezo[i+1]-piezo[i]
    
piezoprime = np.abs(piezoprime)
     
win_len1 = 512
pp_height_factor = 1/3
prominence = (0.002,None)
distance = 200

pp_height = np.zeros_like(piezoprime)
for i in range(len(piezoprime)-win_len1):
    pp_height[int(win_len1/2)+i] = np.max(piezoprime[i:win_len1+i]) * pp_height_factor

# Adjust initial and final height of signal (if not, height=0)
pp_height[0:int(win_len1/2)] = pp_height[int(win_len1/2)]
pp_height[-int(win_len1/2):] = pp_height[-int(win_len1/2)-1]

peakspiezo ,_ = sg.find_peaks(piezoprime,height=pp_height, distance = distance, prominence = prominence)

# fig,ax = plt.subplots(nrows=2,sharex=True)
# ax[0].plot(t[:511999],piezo[:511999], label = "signal piezo")
# ax[0].legend()
# ax[1].plot(t[:511999],piezoprime, label = "Dérivée première du signal piezo")
# ax[1].plot(t[peakspiezo],piezoprime[peakspiezo],'x', label = "pics")
# ax[1].plot(t[:511999], pp_height[:511999], color = "green")
# ax[1].legend()
# fig.show()

#%%

pick_diff = np.zeros(N-1)
for i in range(N-1):
    pick_diff[i] = pickup[i+1]-pickup[i]

pick_diff = np.abs(pick_diff)

peakspick ,_ = sg.find_peaks(pick_diff,height=pp_height, distance = distance, prominence = prominence)

# fig,ax = plt.subplots(nrows=2,sharex=True)
# ax[0].plot(t[:511999],pickup[:511999], label = "signal pickup")
# ax[0].legend()
# ax[1].plot(t[:511999],pick_diff, label = "Dérivée première du signal pickup")
# ax[1].plot(t[peakspick],pick_diff[peakspick],'x', label = "pics")
# ax[1].plot(t[:511999], pp_height[:511999], color = "green")
# ax[1].legend()
# fig.show()

#%%######################################################################
#Fonction pour trier les pics isolés : ça ne marche pas du tout

win_len = 2048


for p in peakspiezo:
    i = 0
    if np.logical_and(p-3*win_len not in peakspiezo, p+3*win_len not in peakspiezo) :
        peakspiezo = np.delete(peakspiezo, i)
    i = i+1

fig,ax = plt.subplots(nrows=2,sharex=True)
ax[0].plot(t[:511999],piezo[:511999], label = "signal piezo")
ax[0].legend()
ax[1].plot(t[:511999],piezoprime, label = "Dérivée première du signal piezo")
ax[1].plot(t[peakspiezo],piezoprime[peakspiezo],'x', label = "pics")
ax[1].plot(t[:511999], pp_height[:511999], color = "green")
ax[1].legend()
fig.show()

#%%

win_len = 2048

abs_sig1_diff = np.abs(np.diff(piezo))

spf_array = np.zeros_like(piezoprime)
std_peaks_array = np.zeros_like(abs_sig1_diff)

nb_peaks1 = np.zeros_like(abs_sig1_diff)
for i in range(len(abs_sig1_diff)-win_len):
    nb_peaks1[int(win_len/2)+i] = len(np.where(
        np.logical_and(peakspiezo >= i, peakspiezo <= (win_len+i)))[0])
    
# plt.figure()
# plt.plot(np.arange(len(nb_peaks))/fe,nb_peaks,label = "signal pickup")

abs_sig2_diff = np.abs(np.diff(pickup))

std_peaks_array = np.zeros_like(abs_sig2_diff)

nb_peaks2 = np.zeros_like(abs_sig2_diff)
for i in range(len(abs_sig2_diff) - win_len):
    nb_peaks2[int(win_len/2)+i] = len(np.where(np.logical_and(peakspick>=i,peakspick<=(win_len+i)))[0])
    
# fig,ax = plt.subplots(nrows=2,sharex=True)
# ax[0].plot(t,pickup, label = "signal pickup")
# ax[0].legend()
# ax[1].plot(np.arange(len(nb_peaks1))/fe,nb_peaks1,label = "signal piezo")
# ax[1].plot(np.arange(len(nb_peaks2))/fe,nb_peaks2,label = "signal pickup")
# ax[1].legend()
# fig.show()

# plt.plot(np.arange(len(nb_peaks2))/fe,nb_peaks2,label = "signal piezzo")
# plt.legend()
# plt.grid()
# plt.show()

#%%############################################################################################

spf_th_wide = 24
std_th = 0.6

def detect_onsets_from_peaks(abs_sig_diff, peaks, sr, lagtime_peak=0.1):
    lagtime_peak_samples = int(lagtime_peak*sr)
    onset_frames = np.array([])
    # Only a peak can be an onset
    for i in range(len(peaks)):
        # If the peaks are in the first lagtime_peak seconds, we can not know
        # if it is an onset
        if peaks[i] < lagtime_peak_samples:
            continue
        # Number of peaks detected lagtime_peak seconds before current peak
        arethey_peaks_before = len(np.where(
            np.logical_and(peaks >= peaks[i] - lagtime_peak_samples,
                           peaks < peaks[i]))[0])
        # If there are no peaks lagtime_peak seconds before current peak
        # --> ONSET DETECTED
        if arethey_peaks_before == 0:
            onset_frames = np.append(onset_frames, peaks[i])
    return onset_frames/sr

file_onsets1 = detect_onsets_from_peaks(abs_sig1_diff, peakspiezo, fe,
                                       lagtime_peak=0.1)
file_onsets2 = detect_onsets_from_peaks(abs_sig2_diff, peakspick, fe,
                                       lagtime_peak=0.1)

spf_array1 = np.zeros_like(piezoprime)

for i in range(len(file_onsets1)):
    if i+1 == len(file_onsets1):
        next_onset = len(abs_sig1_diff)
    else:
        next_onset = file_onsets1[i+1]
    
    transient_end = -1
    nb_peaks_cut = nb_peaks1[int(file_onsets1[i]*fe):int(next_onset*fe)]
    
    for j in range(len(nb_peaks_cut)-win_len):
        first_sample = int(file_onsets1[i]*fe)+j
        last_sample = int(file_onsets1[i]*fe)+j+win_len
        # Mean number of peaks in the current windowed nb_peaks function
        mean_peaks = np.mean(nb_peaks1[first_sample:last_sample])
        # Slipping Phase (pseudo)Frequency (spf) in Hz
        spf = fe*mean_peaks/win_len
        # Std
        std_peaks1 = np.std(nb_peaks1[first_sample:last_sample])
        # store both spf and std in respective arrays
        spf_array1[first_sample] = spf
        std_peaks_array[first_sample] = std_peaks1
        
        spf_th_low = 220/2**(1/spf_th_wide)
        spf_th_up = 220*2**(1/spf_th_wide)
        if spf_th_low < spf < spf_th_up:
            if std_peaks1 < std_th:
                transient_end = int(first_sample)  # in samples
                break
    if transient_end == -1:
        continue


spf_array2 = np.zeros_like(pick_diff)

for i in range(len(file_onsets2)):
    if i+1 == len(file_onsets2):
        next_onset = len(abs_sig2_diff)
    else:
        next_onset = file_onsets2[i+1]
    
    transient_end = -1
    nb_peaks_cut = nb_peaks2[int(file_onsets2[i]*fe):int(next_onset*fe)]
    
    for j in range(len(nb_peaks_cut)-win_len):
        first_sample = int(file_onsets2[i]*fe)+j
        last_sample = int(file_onsets2[i]*fe)+j+win_len
        # Mean number of peaks in the current windowed nb_peaks function
        mean_peaks = np.mean(nb_peaks2[first_sample:last_sample])
        # Slipping Phase (pseudo)Frequency (spf) in Hz
        spf = fe*mean_peaks/win_len
        # Std
        std_peaks = np.std(nb_peaks2[first_sample:last_sample])
        # store both spf and std in respective arrays
        spf_array2[first_sample] = spf
        std_peaks_array[first_sample] = std_peaks
        
        spf_th_low = 220/2**(1/spf_th_wide)
        spf_th_up = 220*2**(1/spf_th_wide)
        if spf_th_low < spf < spf_th_up:
            if std_peaks < std_th:
                transient_end = int(first_sample)  # in samples
                break
    if transient_end == -1:
        continue
    
    
# plt.figure()
# plt.plot(np.arange(len(spf_array1))/fe,spf_array1,label = "signal piezzo")
# plt.plot(np.arange(len(spf_array))/fe,spf_array,label = "signal pickup")
# plt.xlabel("temps (s)")
# plt.ylabel("SPF(hz)")
# plt.legend()
# plt.grid()
# plt.show()    

#%%

fig,ax = plt.subplots(nrows = 4,sharex = True)

ax[0].plot(t,piezo,label = "signal piezzo")
ax[0].plot(t,pickup,label = "signal pickup")

ax[1].plot(t[:511999],piezoprime,label = "signal piezzo")
ax[1].plot(t[peakspiezo],piezoprime[peakspiezo],'x')

ax[1].plot(t[:511999],pick_diff,label = "signal pickup")
ax[1].plot(t[peakspick],pick_diff[peakspick],'x')

ax[2].plot(np.arange(len(nb_peaks1))/fe,nb_peaks1,label = "signal pickup")
ax[2].plot(np.arange(len(nb_peaks2))/fe,nb_peaks2,label = "signal piezzo")

ax[3].plot(np.arange(len(spf_array1))/fe,spf_array1,label = "signal piezzo")
ax[3].plot(np.arange(len(spf_array2))/fe,spf_array2,label = "signal pickup")

ax[0].legend(fontsize = 15, loc = 'right')
ax[1].legend(fontsize = 15)
ax[2].legend(fontsize = 15)
ax[3].legend(fontsize = 15)

ax[3].set_xlabel("temps(s)",fontsize=20)

ax[0].set_ylabel("x",fontsize=20)

ax[1].set_ylabel("|x'|",fontsize=20)

ax[2].set_ylabel("y[slips]",fontsize=20)

ax[3].set_ylabel("SPF(Hz)",fontsize=20)
